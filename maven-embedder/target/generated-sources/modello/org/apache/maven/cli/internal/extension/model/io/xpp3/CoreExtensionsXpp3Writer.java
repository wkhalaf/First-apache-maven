// =================== DO NOT EDIT THIS FILE ====================
// Generated by Modello 2.3.0,
// any modifications will be overwritten.
// ==============================================================

package org.apache.maven.cli.internal.extension.model.io.xpp3;

  //---------------------------------/
 //- Imported classes and packages -/
//---------------------------------/

import java.io.OutputStream;
import java.io.Writer;
import java.util.Iterator;
import org.apache.maven.cli.internal.extension.model.CoreExtension;
import org.apache.maven.cli.internal.extension.model.CoreExtensions;
import org.codehaus.plexus.util.xml.pull.MXSerializer;
import org.codehaus.plexus.util.xml.pull.XmlSerializer;

/**
 * Class CoreExtensionsXpp3Writer.
 * 
 * @version $Revision$ $Date$
 */
@SuppressWarnings( "all" )
public class CoreExtensionsXpp3Writer
{

      //--------------------------/
     //- Class/Member Variables -/
    //--------------------------/

    /**
     * Field NAMESPACE.
     */
    private static final String NAMESPACE = null;

    /**
     * Field fileComment.
     */
    private String fileComment = null;


      //-----------/
     //- Methods -/
    //-----------/

    /**
     * Method setFileComment.
     * 
     * @param fileComment a fileComment object.
     */
    public void setFileComment( String fileComment )
    {
        this.fileComment = fileComment;
    } //-- void setFileComment( String )

    /**
     * Method write.
     * 
     * @param writer a writer object.
     * @param coreExtensions a coreExtensions object.
     * @throws java.io.IOException java.io.IOException if any.
     */
    public void write( Writer writer, CoreExtensions coreExtensions )
        throws java.io.IOException
    {
        XmlSerializer serializer = new MXSerializer();
        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-indentation", "  " );
        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-line-separator", "\n" );
        serializer.setOutput( writer );
        serializer.startDocument( coreExtensions.getModelEncoding(), null );
        writeCoreExtensions( coreExtensions, "extensions", serializer );
        serializer.endDocument();
    } //-- void write( Writer, CoreExtensions )

    /**
     * Method write.
     * 
     * @param stream a stream object.
     * @param coreExtensions a coreExtensions object.
     * @throws java.io.IOException java.io.IOException if any.
     */
    public void write( OutputStream stream, CoreExtensions coreExtensions )
        throws java.io.IOException
    {
        XmlSerializer serializer = new MXSerializer();
        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-indentation", "  " );
        serializer.setProperty( "http://xmlpull.org/v1/doc/properties.html#serializer-line-separator", "\n" );
        serializer.setOutput( stream, coreExtensions.getModelEncoding() );
        serializer.startDocument( coreExtensions.getModelEncoding(), null );
        writeCoreExtensions( coreExtensions, "extensions", serializer );
        serializer.endDocument();
    } //-- void write( OutputStream, CoreExtensions )

    /**
     * Method writeCoreExtension.
     * 
     * @param coreExtension a coreExtension object.
     * @param serializer a serializer object.
     * @param tagName a tagName object.
     * @throws java.io.IOException java.io.IOException if any.
     */
    private void writeCoreExtension( CoreExtension coreExtension, String tagName, XmlSerializer serializer )
        throws java.io.IOException
    {
        serializer.startTag( NAMESPACE, tagName );
        if ( coreExtension.getGroupId() != null )
        {
            serializer.startTag( NAMESPACE, "groupId" ).text( coreExtension.getGroupId() ).endTag( NAMESPACE, "groupId" );
        }
        if ( coreExtension.getArtifactId() != null )
        {
            serializer.startTag( NAMESPACE, "artifactId" ).text( coreExtension.getArtifactId() ).endTag( NAMESPACE, "artifactId" );
        }
        if ( coreExtension.getVersion() != null )
        {
            serializer.startTag( NAMESPACE, "version" ).text( coreExtension.getVersion() ).endTag( NAMESPACE, "version" );
        }
        if ( ( coreExtension.getClassLoadingStrategy() != null ) && !coreExtension.getClassLoadingStrategy().equals( "self-first" ) )
        {
            serializer.startTag( NAMESPACE, "classLoadingStrategy" ).text( coreExtension.getClassLoadingStrategy() ).endTag( NAMESPACE, "classLoadingStrategy" );
        }
        serializer.endTag( NAMESPACE, tagName );
    } //-- void writeCoreExtension( CoreExtension, String, XmlSerializer )

    /**
     * Method writeCoreExtensions.
     * 
     * @param coreExtensions a coreExtensions object.
     * @param serializer a serializer object.
     * @param tagName a tagName object.
     * @throws java.io.IOException java.io.IOException if any.
     */
    private void writeCoreExtensions( CoreExtensions coreExtensions, String tagName, XmlSerializer serializer )
        throws java.io.IOException
    {
        if ( this.fileComment != null )
        {
        serializer.comment(this.fileComment);
        }
        serializer.setPrefix( "", "http://maven.apache.org/EXTENSIONS/1.1.0" );
        serializer.setPrefix( "xsi", "http://www.w3.org/2001/XMLSchema-instance" );
        serializer.startTag( NAMESPACE, tagName );
        serializer.attribute( "", "xsi:schemaLocation", "http://maven.apache.org/EXTENSIONS/1.1.0 http://maven.apache.org/xsd/core-extensions-1.1.0.xsd" );
        if ( ( coreExtensions.getExtensions() != null ) && ( coreExtensions.getExtensions().size() > 0 ) )
        {
            for ( Iterator iter = coreExtensions.getExtensions().iterator(); iter.hasNext(); )
            {
                CoreExtension o = (CoreExtension) iter.next();
                writeCoreExtension( o, "extension", serializer );
            }
        }
        serializer.endTag( NAMESPACE, tagName );
    } //-- void writeCoreExtensions( CoreExtensions, String, XmlSerializer )

}
